//Raymond@HZHL3 ~/code/go/src/github.com/rhu1/scribble-go-runtime
//$ ~/code/eclipse/scribble/github.com/rhu1-go/scribble-java/bin/scribblec-param.sh test/foo/foo01/Foo1.scr -d test/foo/foo01/ -param Proto1 github.com/rhu1/scribble-go-runtime/test/foo/foo01/Foo1 -param-api S -param-api W


// http://sandbox.kidstrythisathome.com/erdos/


module Foo1;


//...scribble-go-examples TODO: merge nickng:master


// scrib surface syntax -- partly done -- TODO: domain annotations, pair/pipe, multi-interval foreach, multidim intervals
// internalise dial/accept peers -- partly done -- TODO: full "nested" API (as an extra option)
// remove proto sig param decls -- done
// endpoint params as fields -- done
// (extra Run/Foreach args?  e.g., "context", foreach indices, etc.) -- cf. Pget, req.Head()

// CHECKME: interleaved sessions using top-level Run API -- generate Init as before

// sig -- partly done -- TODO: custom message formatting (bypass default deserialization type problems)
// foreach -- partly done -- TODO: fix Init/End naming, refactor "nested API" gen, further testing -- TODO: parallel foreach
// families -- partly done -- TODO: annotations or CL args for family names?  (via index var value mappings, test using Z3?)

// errors -- partly done -- TODO: branch action error (need to return some "default" error -- i.e., outside of actual cases)
// state chan prealloc/reuse -- partly done -- TODO: case objects
// linearity -- partly done -- TODO: defer, case objects, sync/atomic?
// tcp/shm -- partly done -- primitive "type" payloads not working for gob
// type-specific channels (shm only?)

// deleg -- Proto1@W[K-3] ? no: should be a local type, so @variant
// Pget

// domain annotations
// pair/pipe -- general index exprs
// Ring

// multidim
// Mesh

// dynamic Pget?




//...update syntax
//... update interval syntax
//... redo foo tests using new scheme -- including sig tests

//...add foreach?
//...Endpoint -- families: dial/accept
//...nested state chan API
//...multidim indices

//...do copy-on-send via Go pass-by-value -- more Go like?



type <go> "int" from "..." as int;
/*type <go> "string" from "..." as string;
type <go> "TwoBuyer.Address" from "scrib/twobuyer/TwoBuyer/TwoBuyer/types.go" as Address;
type <go> "TwoBuyer.Date" from "scrib/twobuyer/TwoBuyer/TwoBuyer/types.go" as Date;*/



global protocol Proto1(role S, role W)
{
	A(int) from S[1,1] to W[1,K];  // Captial 'K' for Go accessibility
}

global protocol ScatterGather(role M, role S) {
   (int) from M[1,1] to S[1,N];
}

